function [trainedClassifier, validationAccuracy] = subspaceKnnTrainingFunc(trainingData)
% trainClassifier(trainingData)
%  returns a trained classifier and its validation accuracy.
%  This code recreates the classification model trained in
%  Classification Learner app.
%
%   Input:
%       trainingData: the training data of same data type as imported
%        in the app (table or matrix).
%
%   Output:
%       trainedClassifier: a struct containing the trained classifier.
%        The struct contains various fields with information about the
%        trained classifier.
%
%       trainedClassifier.predictFcn: a function to make predictions
%        on new data. It takes an input of the same form as this training
%        code (table or matrix) and returns predictions for the response.
%        If you supply a matrix, include only the predictors columns (or
%        rows).
%
%       validationAccuracy: a double containing the validation accuracy
%        score in percent. In the app, the History list displays this
%        overall accuracy score for each model.
%
%  Use the code to train the model with new data.
%  To retrain your classifier, call the function from the command line
%  with your original data or new data as the input argument trainingData.
%
%  For example, to retrain a classifier trained with the original data set
%  T, enter:
%    [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
%  To make predictions with the returned 'trainedClassifier' on new data T,
%  use
%    yfit = trainedClassifier.predictFcn(T)
%
%  To automate training the same classifier with new data, or to learn how
%  to programmatically train classifiers, examine the generated code.

% Auto-generated by MATLAB on 24-Nov-2015 11:03:52


inputTable = trainingData;
% Extract predictors and response
% This code processes the data into the right shape for training the
% classifier.
predictorNames = {'windMean_emg1Collection', 'windMean_emg2Collection', 'windMean_emg3Collection', 'windMean_emg4Collection', 'windMean_emg5Collection', 'windMean_emg6Collection', 'windMean_emg7Collection', 'windMean_emg8Collection', 'windStd_emg1Collection', 'windStd_emg2Collection', 'windStd_emg3Collection', 'windStd_emg4Collection', 'windStd_emg5Collection', 'windStd_emg6Collection', 'windStd_emg7Collection', 'windStd_emg8Collection', 'windPca_emg1Collection', 'windPca_emg2Collection', 'windPca_emg3Collection', 'windPca_emg4Collection', 'windPca_emg5Collection', 'windPca_emg6Collection', 'windPca_emg7Collection', 'windPca_emg8Collection', 'orientation'};
predictors = inputTable(:, predictorNames);
response = inputTable.pose;

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
subspaceDimension = max(1, min(13, width(predictors) - 1));
classificationEnsemble = fitensemble(...
    predictors, ...
    response, ...
    'Subspace', ...
    30, ...
    'KNN', ...
    'Type', 'Classification', ...
    'NPredToSample', subspaceDimension, ...
    'ClassNames', categorical({'0'; '1'; '2'}));

trainedClassifier.ClassificationEnsemble = classificationEnsemble;
extractPredictorsFromTableFcn = @(t) t(:, predictorNames);
predictorExtractionFcn = @(x) extractPredictorsFromTableFcn(x);
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
trainedClassifier.predictFcn = @(x) ensemblePredictFcn(predictorExtractionFcn(x));
inputTable = trainingData;
% Extract predictors and response
% This code processes the data into the right shape for training the
% classifier.
predictorNames = {'windMean_emg1Collection', 'windMean_emg2Collection', 'windMean_emg3Collection', 'windMean_emg4Collection', 'windMean_emg5Collection', 'windMean_emg6Collection', 'windMean_emg7Collection', 'windMean_emg8Collection', 'windStd_emg1Collection', 'windStd_emg2Collection', 'windStd_emg3Collection', 'windStd_emg4Collection', 'windStd_emg5Collection', 'windStd_emg6Collection', 'windStd_emg7Collection', 'windStd_emg8Collection', 'windPca_emg1Collection', 'windPca_emg2Collection', 'windPca_emg3Collection', 'windPca_emg4Collection', 'windPca_emg5Collection', 'windPca_emg6Collection', 'windPca_emg7Collection', 'windPca_emg8Collection', 'orientation'};
predictors = inputTable(:, predictorNames);
response = inputTable.pose;


% Set up holdout validation
cvp = cvpartition(response, 'Holdout', 0.2);
trainingPredictors = predictors(cvp.training,:);
trainingResponse = response(cvp.training,:);

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
subspaceDimension = max(1, min(13, width(trainingPredictors) - 1));
classificationEnsemble = fitensemble(...
    trainingPredictors, ...
    trainingResponse, ...
    'Subspace', ...
    30, ...
    'KNN', ...
    'Type', 'Classification', ...
    'NPredToSample', subspaceDimension, ...
    'ClassNames', categorical({'0'; '1'; '2'}));

ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
validationPredictFcn = @(x) ensemblePredictFcn(x);

% Compute validation accuracy
validationPredictors = predictors(cvp.test,:);
validationResponse = response(cvp.test,:);

[validationPredictions, validationScores] = validationPredictFcn(validationPredictors);
correctPredictions = (validationPredictions == validationResponse);
validationAccuracy = sum(correctPredictions)/length(correctPredictions);